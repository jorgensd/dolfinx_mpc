name: Build docs

on:
  workflow_run:
    workflows: [Test MPC]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-22.04
    container: ghcr.io/fenics/dolfinx/dolfinx:nightly
    env:
      # Directory that will be published on github pages
      PUBLISH_DIR: ./docs/_build/html
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - uses: actions/checkout@v3

      - name: Install DOLFINx-MPC (C++)
        run: |
          cmake -G Ninja -B build-dir -DCMAKE_BUILD_TYPE=Release -S cpp/
          cmake --build build-dir --parallel 3
          cmake --install build-dir

      - name: Install DOLFINx-MPC (Python)
        run: python3 -m pip -v install python/[docs]

      - name: Build docs
        run: jupyter book build docs

      # Based on: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#using-data-from-the-triggering-workflow
      - name: 'Download coverage artifact'
        uses: actions/github-script@v6.4.0
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "code-coverage-report"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/code-coverage-report.zip`, Buffer.from(download.data));

      - name: Unzip artifact
        run: |
          unzip code-coverage-report.zip -d ${{ env.PUBLISH_DIR }}/code-coverage-report


      - name: Upload documentation as artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: ${{ env.PUBLISH_DIR }}
          if-no-files-found: error
