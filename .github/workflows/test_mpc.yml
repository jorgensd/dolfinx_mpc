name: Test DOLFINx-MPC

on:
  # Trigger tests on push
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    # '*' is a special character in YAML, so string must be quoted
    - cron: "0 8 * * *"
jobs:
  build:
    if: "!(contains(github.event.head_commit.message, '[ci skip]') || contains(github.event.head_commit.message, '[skip ci]'))"
    runs-on: ubuntu-22.04
    container: dolfinx/dev-env:nightly

    strategy:
      matrix:
        petsc_arch: [real, complex]

    env:
      CC: mpicc
      PETSC_ARCH: "linux-gnu-${{ matrix.petsc_arch }}-32"
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_rmaps_base_oversubscribe: 1
      OMPI_MCA_plm: isolated
      OMPI_MCA_btl_vader_single_copy_mechanism: none
      OMPI_MCA_mpi_yield_when_idle: 1
      OMPI_MCA_hwloc_base_binding_policy: none
      HDF5_MPI: "ON"
      HDF5_DIR: "/usr/local/"
      MPC_BUILD_MODE: "Debug"
      MPC_CMAKE_CXX_FLAGS: "-Wall -Werror -g -pedantic -Ofast -march=native"
      PYTHONPATH: "/usr/local/dolfinx-${PETSC_TYPE}/lib/python3.10/dist-packages:/usr/local/lib"
      LD_LIBRARY_PATH: "/usr/local/petsc/${PETSC_ARCH}/lib/:/usr/local"

    steps:
      - uses: actions/checkout@v2

      - name: Flake8 code
        run: flake8 python/

      - name: Mypy check
        run: |
           pip3 install mypy
           cd python
           python3 -m mypy . --exclude=build

      - name: Install h5py
        run: |
          pip3 install --no-cache-dir --no-binary=h5py h5py

      - name: Get Basix
        uses: actions/checkout@v2
        with:
          path: ./basix
          repository: FEniCS/basix
          ref: main

      - name: Install UFL, Basix, FFCx
        run: |
          cmake -G Ninja -B build-basix -DCMAKE_BUILD_TYPE="Release" -S ./basix/cpp/
          cmake --build build-basix --parallel 3
          cmake --install build-basix
          BUILD_TYPE="Release" pip3 install ./basix/python
          python3 -m pip install git+https://github.com/FEniCS/ufl.git@main
          python3 -m pip install git+https://github.com/FEniCS/ffcx.git@main

      - name: Get DOLFINx
        uses: actions/checkout@v2
        with:
          path: ./dolfinx
          repository: FEniCS/dolfinx
          ref: main

      - name: Configure C++ (dolfinx)
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE="Release" -B build-dolfinx -S ./dolfinx/cpp/

      - name: Build and install C++ library (dolfinx)
        run: |
          cmake --build build-dolfinx
          cmake --install build-dolfinx

      - name: Build Python interface (dolfinx)
        run: BUILD_TYPE="Release" python3 -m pip -v install ./dolfinx/python/

      - name: Install DOLFINx-MPC (C++)
        run: |
          cmake -G Ninja -B build-dir -DCMAKE_BUILD_TYPE=${MPC_BUILD_MODE} -DCMAKE_CXX_FLAGS="${MPC_CMAKE_CXX_FLAGS}" -S cpp/
          cmake --build build-dir --parallel 3
          cmake --install build-dir

      - name: Install DOLFINx-MPC (Python)
        run: CXX_FLAGS="${MPC_CMAKE_CXX_FLAGS}" python3 -m pip -v install python/

      - name: Run tests
        run: |
          python3 -m pytest python/tests -vs
          mpirun -n 2 python3 -m pytest python/tests
          mpirun -n 3 python3 -m pytest python/tests
          mpirun -n 4 python3 -m pytest python/tests
      - name: Run benchmarks
        run: |
          cd python/benchmarks
          mkdir results
          mkdir meshes
          mpirun -n 4 python3 bench_periodic.py --nref=2 --tet --gamg --timings
          mpirun -n 4 python3 bench_elasticity_edge.py --nref=2 --gamg --timings
          mpirun -n 4 python3 bench_contact_3D.py

      - name: Run demos (serial)
        run: |
          cd python/demos
          mkdir meshes
          mkdir results
          python3 demo_elasticity.py
          python3 demo_periodic_geometrical.py
          python3 demo_stokes.py
          python3 demo_periodic3d_topological.py
          python3 demo_elasticity_disconnect_2D.py
          python3 demo_elasticity_disconnect.py
          make contact2D-serial
          make contact3D-serial

      - name: Run demos (parallel)
        run: |
          cd python/demos
          mpirun -n 4 python3 demo_elasticity.py
          mpirun -n 4 python3 demo_periodic_geometrical.py
          mpirun -n 4 python3 demo_stokes.py
          mpirun -n 4 python3 demo_periodic3d_topological.py
          mpirun -n 4 python3 demo_elasticity_disconnect_2D.py
          mpirun -n 4 python3 demo_elasticity_disconnect.py
          make contact2D-parallel
          make contact3D-parallel
